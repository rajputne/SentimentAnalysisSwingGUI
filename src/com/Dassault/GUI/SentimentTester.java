/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.Dassault.GUI;

import com.Dassault.Utilities.SentenceUtils;
import com.Dassault.Business.SentimentAlgorithm;
import com.Dassault.Utilities.GeneralUtility;
import com.Dassault.Algorithms.SWN3;
import com.Dassault.Business.ScoreWeightage;
import com.Dassault.Algorithms.StanfordNLP;

import static com.Dassault.GUI.SentimentAnalysisFileGenerator.removeUrl;
import static com.Dassault.GUI.SentimentAnalysisFileGenerator.sentimentWeigtage;
import static com.Dassault.GUI.SentimentAnalysisFileGenerator.slem;
import edu.stanford.nlp.ling.HasWord;
import edu.stanford.nlp.process.DocumentPreprocessor;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author NRT4
 */
public class SentimentTester extends javax.swing.JFrame {

    /**
     * Creates new form SentimentTester
     */
    ArrayList<SentimentAlgorithm> saList;

    public SentimentTester() {
        initComponents();
        saList = new ArrayList<>();
        populateTable();

    }

    private void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) jMainTable.getModel();
        int rowCount = jMainTable.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            saList.remove(i);
        }
        dtm.setRowCount(0);
        for (SentimentAlgorithm vs : saList) {
            Object row[] = new Object[3];
            row[0] = vs.getSentimentAlgorithm();
            row[1] = vs.getSentimentScore();
            row[2] = vs.getSentiment();

            dtm.addRow(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainjPanel = new javax.swing.JPanel();
        jGetText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jMainTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        MainjPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jGetText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jGetTextActionPerformed(evt);
            }
        });
        MainjPanel.add(jGetText, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 79, 564, -1));

        jLabel1.setText("Text");
        MainjPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 82, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("Sentiment Analysis");
        MainjPanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(246, 11, -1, -1));

        jButton1.setText("Do Sentiment Analysis");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        MainjPanel.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(475, 117, -1, -1));

        jMainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sentiment Analyzer Algorithm", "Score", "Sentiment"
            }
        ));
        jScrollPane1.setViewportView(jMainTable);

        MainjPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 200, 524, 77));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"0 to 1.5", "Negative"},
                {"1.5 to 2.5", "Neutral"},
                {"2.5 to 4.0 ", "Positive"}
            },
            new String [] {
                "Range", "Sentiment"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        MainjPanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 320, 208, 80));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"0 to 1", "Positive"},
                {"-1 to 0", "Negative"},
                {"0", "Neutral"}
            },
            new String [] {
                "Range Score", "Sentiment"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        MainjPanel.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 320, 208, 80));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("SentiWordNet Chart");
        MainjPanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 290, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Stanford Sentiment Analysis Chart");
        MainjPanel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 290, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Sentiment Score Comparision");
        MainjPanel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 170, -1, -1));

        getContentPane().add(MainjPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jGetTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGetTextActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_jGetTextActionPerformed

    public SentimentAlgorithm getSWN3SentimentAnalysis(String sentences) {

        SentimentAlgorithm sentimentAlgorithm = new SentimentAlgorithm();
        String srComments = sentences;
        SWN3 swn = new SWN3("/sentiment/sentiwordnet.txt");
        String language = GeneralUtility.LanguageDetector(srComments);

        try {
            String paragraph = srComments;
            paragraph = paragraph.toLowerCase();
            paragraph = paragraph.trim().replaceAll(" +", " ");

            //1. Remove all the Digits
            paragraph = paragraph.replaceAll("[0-9]", "");
            //2. Remove Stopwords
            paragraph = GeneralUtility.cleanStopWords(paragraph);
            //3. Remove remove Urls
            paragraph = removeUrl(paragraph);

            sentimentAlgorithm.setSentiment(SWN3.extractParagraphSentiment(paragraph, swn));
            sentimentAlgorithm.setSentimentAlgorithm("SentiWordNet");
            Double score = SWN3.totalScore;
            sentimentAlgorithm.setSentimentScore(score);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Sentiwordnet:Error or there is no text or the text was a stopword.");
        }
        return sentimentAlgorithm;
    }

    public SentimentAlgorithm getStanfordSentimentAnalysis(String sentences) {
        SentimentAlgorithm sentimentAlgorithm = new SentimentAlgorithm();
        double sentimentScore;
        String srComments = sentences;
        if (!srComments.isEmpty()) {
            //preprocess the text
            String language = GeneralUtility.LanguageDetector(sentences);
            if (language.contains("en") || language.isEmpty()) {

                sentimentScore = StanfordNLP.getSentiments(srComments);
                if (Double.isNaN(sentimentScore)) {
                    sentimentScore = -1;
                }
            } else {
                srComments = language;
                sentimentScore = 2;
            }
        } else {
            sentimentScore = 2;
        }

        //Assign Sentiment Weightage
        String sentiment = null;
        if (sentimentScore >= 0 && sentimentScore < 1.5) {
            sentiment = "Negative";

        } else if (sentimentScore >= 1.5 && sentimentScore < 2.5) {
            sentiment = "Neutral";

        } else if (sentimentScore >= 2.5 && sentimentScore <= 4.0) {
            sentiment = "Positive";

        } else if (sentimentScore == -1) {
            sentiment = "No Sentiments";
        }
        sentimentAlgorithm.setSentimentScore(sentimentScore);
        sentimentAlgorithm.setSentimentAlgorithm("StanfordNLP");
        sentimentAlgorithm.setSentiment(sentiment);

        return sentimentAlgorithm;

    }

    public SentimentAlgorithm getLemmatizedStanfordSentimentAnalysis(String sentences) {
        SentimentAlgorithm sentimentAlgorithm = new SentimentAlgorithm();
        String srComments = sentences;
        srComments = srComments.trim().replaceAll(" +", " ");
        //1. Remove all the Digits
        srComments = srComments.replaceAll("[0-9]", "");

        //2. Remove Links
        srComments = removeUrl(srComments);
        srComments = srComments.replace("/", "");
        srComments = srComments.replace("[^A-Za-z.!?]", " ");
        srComments = srComments.replaceAll("([^\\w\\s\\d])\\1+", "$1");
        //3. Remove Stop Words Skip
        //\ srComments = cleanStopWords(srComments1);
        String clean = srComments;
        double sentimentScore;
        String sentiment = "";
        if (!clean.isEmpty()) {
            //preprocess the text
            String language = GeneralUtility.LanguageDetector(sentences);
            if (language.contains("en") || language.isEmpty()) {

                Reader reader = new StringReader(clean);
                DocumentPreprocessor dp = new DocumentPreprocessor(reader);
                List<String> sentenceList = new ArrayList<String>();
                for (List<HasWord> sentence : dp) {
                    // SentenceUtils not Sentence
                    String sentenceString = SentenceUtils.listToString(sentence);
                    sentenceList.add(sentenceString);
                }
                StringBuilder mainString = new StringBuilder();
                for (String sentence : sentenceList) {
                    System.out.println(sentence);
                    System.out.println(slem.lemmatize(sentence));
                    String test[] = slem.lemmatize(sentence).toString().split(",");
                    StringBuilder sb = new StringBuilder();
                    for (String text1 : test) {
                        clean = text1.replaceAll("[^A-Za-z]", " ");
                        clean = clean.trim().replaceAll(" +", " ");
                        if (!clean.isEmpty()) {
                            //clean = p.stripAffixes(clean);
                        }
                        sb.append(clean);
                        sb.append(" ");
                    }
                    System.out.println("Sentences:" + sb);
                    mainString.append(sb);
                }
                System.out.println("Original String" + mainString);

                String mainStringtoString = mainString.toString().trim().replaceAll(" +", " ");
                mainStringtoString = mainStringtoString.replaceAll("[^A-Za-z.]", " ");

                System.out.println("Original String" + mainStringtoString);
                mainStringtoString = srComments.replaceAll("[^A-Za-z.?!]", " ");;
                sentimentScore = StanfordNLP.getSentiments(mainStringtoString);
                //srComments = mainStringtoString;
                if (Double.isNaN(sentimentScore)) {
                    sentimentScore = -1;
                    srComments = srComments.replaceAll("[?]", "");
                }
            } else {
                srComments = language;
                sentimentScore = 2;
            }
        } else {
            sentimentScore = 2;
        }

        //Assign Sentiment Weightage
        if (sentimentScore >= 0 && sentimentScore < 1.5) {
            sentiment = "Negative";

        } else if (sentimentScore >= 1.5 && sentimentScore < 2.5) {
            sentiment = "Neutral";

        } else if (sentimentScore >= 2.5 && sentimentScore <= 4.0) {
            sentiment = "Positive";

        } else if (sentimentScore == -1) {
            sentiment = "No Sentiments";

        }
        sentimentAlgorithm.setSentiment(sentiment);
        sentimentAlgorithm.setSentimentScore(sentimentScore);
        sentimentAlgorithm.setSentimentAlgorithm("Stanford Lemmatized");

        return sentimentAlgorithm;

    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String text = jGetText.getText();

        saList.add(getSWN3SentimentAnalysis(text));
        saList.add(getStanfordSentimentAnalysis(text));
        saList.add(getLemmatizedStanfordSentimentAnalysis(text));

        populateTable();

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SentimentTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SentimentTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SentimentTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SentimentTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SentimentTester().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MainjPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JTextField jGetText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTable jMainTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
